data2_l = df2 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data3_h = df3 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data3_l = df3 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
line_width = 2
cols <- c("blue", "red","blue","red","blue","red")
plot(sort(data1_l), type="l", ylim=c(-20,25), xlim=c(0,1000), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data1_h), x=((length(data1_h)+1):(length(data1_h)+length(data1_l))), col="red", lwd=line_width, lty=1)
lines(sort(data2_l), col="blue", lwd=line_width, lty=2)
lines(sort(data2_h), x=((length(data2_h)+1):(length(data2_h)+length(data2_l))), col="red", lwd=line_width, lty=2)
lines(sort(data3_l), col="blue", lwd=line_width, lty=3)
lines(sort(data3_h), x=((length(data3_h)+1):(length(data3_h)+length(data3_l))), col="red", lwd=line_width, lty=3)
title("Extreme values for each method")
legend( "topleft", legend=c("POT low", "POT high","BM low", "BM high","MA low","MA high"), col = cols, lty=c(1,1,2,2,3,3))
}
Plot_All_Extremes(Tair_extreme_POT, Tair_extreme_BM, Tair_extreme_MA)
Plot_All_Extremes = function(df1, df2, df3){
data1_h = df1 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data1_l = df1 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data2_h = df2 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data2_l = df2 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data3_h = df3 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data3_l = df3 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
line_width = 2
cols <- c("blue", "red","blue","red","blue","red")
plot(sort(data1_l), type="l", ylim=c(-20,25), xlim=c(0,1000), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data1_h), x=((length(data1_h)+1):(length(data1_h)+length(data1_l))), col="red", lwd=line_width, lty=1)
lines(sort(data2_l), col="blue", lwd=line_width, lty=2)
lines(sort(data2_h), x=((length(data2_h)+1):(length(data2_h)+length(data2_l))), col="red", lwd=line_width, lty=2)
lines(sort(data3_l), col="blue", lwd=line_width, lty=3)
lines(sort(data3_h), x=((length(data3_h)+1):(length(data3_h)+length(data3_l))), col="red", lwd=line_width, lty=3)
title("Extreme values for each method")
legend( "topleft", legend=c("POT low", "POT high","BM low", "BM high","MA low","MA high"), col = cols, lty=c(1,1,2,2,3,3))
}
Plot_All_Extremes(Tair_extreme_POT, Tair_extreme_BM, Tair_extreme_MA)
Plot_All_Extremes = function(df1, df2, df3){
data1_h = df1 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data1_l = df1 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data2_h = df2 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data2_l = df2 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data3_h = df3 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data3_l = df3 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
line_width = 2
cols <- c("blue", "red","blue","red","blue","red")
print(length(data2_h))
plot(sort(data1_l), type="l", ylim=c(-20,25), xlim=c(0,1000), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data1_h), x=((length(data1_h)+1):(length(data1_h)+length(data1_l))), col="red", lwd=line_width, lty=1)
lines(sort(data2_l), col="blue", lwd=line_width, lty=2)
lines(sort(data2_h), x=((length(data2_h)+1):(length(data2_h)+length(data2_l))), col="red", lwd=line_width, lty=2)
lines(sort(data3_l), col="blue", lwd=line_width, lty=3)
lines(sort(data3_h), x=((length(data3_h)+1):(length(data3_h)+length(data3_l))), col="red", lwd=line_width, lty=3)
title("Extreme values for each method")
legend( "topleft", legend=c("POT low", "POT high","BM low", "BM high","MA low","MA high"), col = cols, lty=c(1,1,2,2,3,3))
}
Plot_All_Extremes(Tair_extreme_POT, Tair_extreme_BM, Tair_extreme_MA)
Total_Extremes(Tair_extreme_BM)
Total_Extremes(Tair_extreme_MA)
Plot_All_Extremes = function(df1, df2, df3){
data1_h = df1 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data1_l = df1 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data2_h = df2 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data2_l = df2 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data3_h = df3 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data3_l = df3 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
line_width = 2
cols <- c("blue", "red","blue","red","blue","red")
print(length(data2_h))
plot(sort(data1_l), type="l", ylim=c(-20,25), xlim=c(0,1400), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data1_h), x=((length(data1_h)+1):(length(data1_h)+length(data1_l))), col="red", lwd=line_width, lty=1)
lines(sort(data2_l), col="blue", lwd=line_width, lty=2)
lines(sort(data2_h), x=((length(data2_h)+1):(length(data2_h)+length(data2_l))), col="red", lwd=line_width, lty=2)
lines(sort(data3_l), col="blue", lwd=line_width, lty=3)
lines(sort(data3_h), x=((length(data3_h)+1):(length(data3_h)+length(data3_l))), col="red", lwd=line_width, lty=3)
title("Extreme values for each method")
legend( "topleft", legend=c("POT low", "POT high","BM low", "BM high","MA low","MA high"), col = cols, lty=c(1,1,2,2,3,3))
}
Plot_All_Extremes(Tair_extreme_POT, Tair_extreme_BM, Tair_extreme_MA)
Plot_All_Extremes = function(df1, df2, df3){
data1_h = df1 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data1_l = df1 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data2_h = df2 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data2_l = df2 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data3_h = df3 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data3_l = df3 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
line_width = 2
cols <- c("blue", "red","blue","red","blue","red")
print(length(data2_h))
par(mfrow=c(3,1))
plot(sort(data1_l), type="l", ylim=c(-20,25), xlim=c(0,850), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data1_h), x=((length(data1_h)+1):(length(data1_h)+length(data1_l))), col="red", lwd=line_width, lty=1)
plot(sort(data2_l), type="l", ylim=c(-20,25), xlim=c(0,1500), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data2_h), x=((length(data2_h)+1):(length(data2_h)+length(data2_l))), col="red", lwd=line_width, lty=2)
plot(sort(data3_l), type="l", ylim=c(-20,25), xlim=c(0,850), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data3_h), x=((length(data3_h)+1):(length(data3_h)+length(data3_l))), col="red", lwd=line_width, lty=3)
title("Extreme values for each method")
legend( "topleft", legend=c("POT low", "POT high","BM low", "BM high","MA low","MA high"), col = cols, lty=c(1,1,2,2,3,3))
}
Plot_All_Extremes(Tair_extreme_POT, Tair_extreme_BM, Tair_extreme_MA)
Plot_All_Extremes = function(df1, df2, df3){
data1_h = df1 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data1_l = df1 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data2_h = df2 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data2_l = df2 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data3_h = df3 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data3_l = df3 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
line_width = 2
cols <- c("blue", "red")
print(length(data2_h))
par(mfrow=c(3,1))
plot(sort(data1_l), type="l", ylim=c(-20,25), xlim=c(0,850), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data1_h), x=((length(data1_h)+1):(length(data1_h)+length(data1_l))), col="red", lwd=line_width, lty=1)
legend( "topleft", legend=c("POT low", "POT high"), col = cols, lty=c(1,1))
plot(sort(data2_l), type="l", ylim=c(-20,25), xlim=c(0,1500), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data2_h), x=((length(data2_h)+1):(length(data2_h)+length(data2_l))), col="red", lwd=line_width, lty=2)
legend( "topleft", legend=c("BM low", "BM high"), col = cols, lty=c(2,2))
plot(sort(data3_l), type="l", ylim=c(-20,25), xlim=c(0,850), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data3_h), x=((length(data3_h)+1):(length(data3_h)+length(data3_l))), col="red", lwd=line_width, lty=3)
legend( "topleft", legend=c("MA low","MA high"), col = cols, lty=c(3,3))
title("Extreme values for each method")
}
Plot_All_Extremes(Tair_extreme_POT, Tair_extreme_BM, Tair_extreme_MA)
Plot_All_Extremes = function(df1, df2, df3){
data1_h = df1 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data1_l = df1 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data2_h = df2 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data2_l = df2 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data3_h = df3 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data3_l = df3 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
line_width = 2
cols <- c("blue", "red")
layout.matrix <- matrix(c(1, 2, 3), nrow = 3, ncol = 1)
layout(mat = layout.matrix,
heights = c(2,2,2), # Heights of the 3 rows
widths = c(1)) # Widths of the column
plot(sort(data1_l), type="l", ylim=c(-20,25), xlim=c(0,850), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data1_h), x=((length(data1_h)+1):(length(data1_h)+length(data1_l))), col="red", lwd=line_width, lty=1)
legend( "topleft", legend=c("POT low", "POT high"), col = cols, lty=c(1,1))
plot(sort(data2_l), type="l", ylim=c(-20,25), xlim=c(0,1500), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data2_h), x=((length(data2_h)+1):(length(data2_h)+length(data2_l))), col="red", lwd=line_width, lty=2)
legend( "topleft", legend=c("BM low", "BM high"), col = cols, lty=c(2,2))
plot(sort(data3_l), type="l", ylim=c(-20,25), xlim=c(0,850), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data3_h), x=((length(data3_h)+1):(length(data3_h)+length(data3_l))), col="red", lwd=line_width, lty=3)
legend( "topleft", legend=c("MA low","MA high"), col = cols, lty=c(3,3))
title("Extreme values for each method")
}
Plot_All_Extremes(Tair_extreme_POT, Tair_extreme_BM, Tair_extreme_MA)
Plot_All_Extremes = function(df1, df2, df3){
data1_h = df1 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data1_l = df1 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data2_h = df2 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data2_l = df2 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data3_h = df3 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data3_l = df3 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
line_width = 2
cols <- c("blue", "red")
layout.matrix <- matrix(c(1, 2, 3), nrow = 3, ncol = 1)
layout(mat = layout.matrix,
heights = c(2,2,2), # Heights of the 3 rows
widths = c(1)) # Widths of the column
plot(sort(data1_l), type="l", ylim=c(-20,25), xlim=c(0,850), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data1_h), x=((length(data1_h)+1):(length(data1_h)+length(data1_l))), col="red", lwd=line_width, lty=1)
legend( "topleft", legend=c("POT low", "POT high"), col = cols, lty=c(1,1))
plot(sort(data2_l), type="l", ylim=c(-20,25), xlim=c(0,1500), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data2_h), x=((length(data2_h)+1):(length(data2_h)+length(data2_l))), col="red", lwd=line_width, lty=2)
legend( "topleft", legend=c("BM low", "BM high"), col = cols, lty=c(2,2))
plot(sort(data3_l), type="l", ylim=c(-20,25), xlim=c(0,850), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data3_h), x=((length(data3_h)+1):(length(data3_h)+length(data3_l))), col="red", lwd=line_width, lty=3)
legend( "topleft", legend=c("MA low","MA high"), col = cols, lty=c(3,3))
}
Plot_All_Extremes(Tair_extreme_POT, Tair_extreme_BM, Tair_extreme_MA)
Plot_All_Extremes = function(df1, df2, df3){
data1_h = df1 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data1_l = df1 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data2_h = df2 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data2_l = df2 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data3_h = df3 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data3_l = df3 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
line_width = 2
cols <- c("blue", "red")
par(mfrow=c(1,3))
plot(sort(data1_l), type="l", ylim=c(-20,25), xlim=c(0,850), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data1_h), x=((length(data1_h)+1):(length(data1_h)+length(data1_l))), col="red", lwd=line_width, lty=1)
legend( "topleft", legend=c("POT low", "POT high"), col = cols, lty=c(1,1))
plot(sort(data2_l), type="l", ylim=c(-20,25), xlim=c(0,1500), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data2_h), x=((length(data2_h)+1):(length(data2_h)+length(data2_l))), col="red", lwd=line_width, lty=2)
legend( "topleft", legend=c("BM low", "BM high"), col = cols, lty=c(2,2))
plot(sort(data3_l), type="l", ylim=c(-20,25), xlim=c(0,850), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data3_h), x=((length(data3_h)+1):(length(data3_h)+length(data3_l))), col="red", lwd=line_width, lty=3)
legend( "topleft", legend=c("MA low","MA high"), col = cols, lty=c(3,3))
title("Extreme values for each method")
}
Plot_All_Extremes(Tair_extreme_POT, Tair_extreme_BM, Tair_extreme_MA)
Plot_All_Extremes = function(df1, df2, df3){
data1_h = df1 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data1_l = df1 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data2_h = df2 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data2_l = df2 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
data3_h = df3 %>% filter(Extreme == 'Extreme-high') %>% pull(Value)
data3_l = df3 %>% filter(Extreme == 'Extreme-low') %>% pull(Value)
line_width = 2
cols <- c("blue", "red")
par(mfrow=c(1,3))
plot(sort(data1_l), type="l", ylim=c(-20,25), xlim=c(0,850), lty=1 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data1_h), x=((length(data1_h)+1):(length(data1_h)+length(data1_l))), col="red", lwd=line_width, lty=1)
legend( "topleft", legend=c("POT low", "POT high"), col = cols, lty=c(1,1))
title("Extreme values for POT method")
plot(sort(data2_l), type="l", ylim=c(-20,25), xlim=c(0,1500), lty=2 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data2_h), x=((length(data2_h)+1):(length(data2_h)+length(data2_l))), col="red", lwd=line_width, lty=2)
legend( "topleft", legend=c("BM low", "BM high"), col = cols, lty=c(2,2))
title("Extreme values for BA method")
plot(sort(data3_l), type="l", ylim=c(-20,25), xlim=c(0,850), lty=3 , col="blue", lwd=line_width, ylab = "Temperature of Extreme Value [°C]")
lines(sort(data3_h), x=((length(data3_h)+1):(length(data3_h)+length(data3_l))), col="red", lwd=line_width, lty=3)
legend( "topleft", legend=c("MA low","MA high"), col = cols, lty=c(3,3))
title("Extreme values for MA method")
}
Plot_All_Extremes(Tair_extreme_POT, Tair_extreme_BM, Tair_extreme_MA)
## Extreme at 95th percentile using MA method---
Tair_extreme_MA = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'MA', rollmean_period = 365)
Plot_All_Extremes(Tair_extreme_POT, Tair_extreme_BM, Tair_extreme_MA)
Plot_Extremes(Tair_extreme_MA %>% filter(Date > '2017-01-01'))
## Extreme at 95th percentile using MA method---
Tair_extreme_MA = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'MA', rollmean_period = 15)
Plot_Extremes(Tair_extreme_MA %>% filter(Date > '2017-01-01'))
Print_Quantile_Thresholds(Tair_extreme_MA, 5, 95)
Print_Quantile_Thresholds(Tair_extreme_BM, 5, 95)
Print_Quantile_Thresholds(Tair_extreme_POT, 5, 95)
View(Tair_extreme_POT)
Print_Quantile_Thresholds(Tair_extreme_BM, 5, 95)
Print_Quantile_Thresholds = function(DF, lower_limit, upper_limit){
print("Lower extreme limit: ")
print(quantile(DF$del_Var, probs=lower_limit * 0.01, na.rm=TRUE))
print("Upper extreme limit: ")
print(quantile(DF$del_Var, probs=upper_limit * 0.01, na.rm=TRUE ))
}
Print_Quantile_Thresholds(Tair_extreme_BM, 5, 95)
Print_Quantile_Thresholds(Tair_extreme_MA, 5, 95)
Print_Quantile_Thresholds(Tair_extreme_MA, 5, 95)
Extremes_per_year_BM = Extremes_per_year(Tair_extreme_BM)
## Extreme at 95th percentile using POT method---
Tair_extreme_POT = Extreme_detection(TairData$Tair_f, TairData$Date, 75, 'POT')
Extremes_per_year_POT = Extremes_per_year(Tair_extreme_POT)
## Extreme at 95th percentile using POT method---
Tair_extreme_POT = Extreme_detection(TairData$Tair_f, TairData$Date, 75, 'POT')
Extremes_per_year_POT = Extremes_per_year(Tair_extreme_POT)
## Extreme at 95th percentile using POT method---
Tair_extreme_POT = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'POT')
Extremes_per_year_POT = Extremes_per_year(Tair_extreme_POT)
Quantiles(Tair_extreme_POT$Value)
Quantiles(Tair_extreme_POT$Value,5,95)
Print_Quantile_Thresholds(Tair_extreme_BM, 5, 95)
Plot_Extremes(Tair_extreme_POT %>% filter(Date > '2017-01-01'))
Extremes_per_year_POT = Extremes_per_year(Tair_extreme_POT)
Plot_Extremes(Tair_extreme_POT %>% filter(Date > '2017-01-01'))
Total_Extremes(Tair_extreme_POT)
Quantiles(Tair_extreme_BM$Var_LTm, 5, 95)
Quantiles(Tair_extreme_POT$Value, 5, 95)
Quantiles(Tair_extreme_BM$Var_LTm, 5, 95)
Quantiles(Tair_extreme_POT$Value, 5, 95)
Quantiles(Tair_extreme_BM$Var_LTm, 5, 95)
Plot_All_Extremes(Tair_extreme_POT, Tair_extreme_BM, Tair_extreme_MA)
Quantiles = function(x, q_low, q_high){
x_mean = mean(x)
x_sd = sd(x)
y = dnorm(x, T1997_mean, T1997_sd)
qh = quantile(x,q_high*0.01, na.rm=TRUE)
ql = quantile(x,q_low*0.01, na.rm=TRUE)
above_qh = TairData$Tair_f[TairData$Tair_f > qh]
below_ql = TairData$Tair_f[TairData$Tair_f < ql]
print(paste("Lower threshold of ",q_low,"%: ",sep = ""))
print(ql)
print(paste("Upper threshold of ",q_high,"%: ",sep = ""))
print(qh)
plot(x,y)
lines(c(ql,ql), c(0,1), col="red", lwd=4)
lines(c(qh,qh), c(0,1), col="blue", lwd=4)
legend("topleft", legend=c(paste("Q",q_low,sep = ""), paste("Q",q_high,sep = "")), col=c("red","blue"), lty=1, lwd=4)
}
Quantiles(Tair_extreme_POT$Value, 5, 95)
Quantiles(Tair_extreme_BM$Var_LTm, 5, 95)
Print_Quantile_Thresholds(Tair_extreme_MA, 5, 95)
Quantiles(Tair_extreme_MA$Var_LTm, 5, 95)
Quantiles(Tair_extreme_MA$Var_15ma, 5, 95)
Quantiles(Tair_extreme_BM$del_Var, 5, 95)
Quantiles(Tair_extreme_MA$del_Var, 5, 95)
## Extreme at 95th percentile using POT method---
Tair_extreme_POT = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'POT')
## Extreme at 95th percentile using POT method---
Tair_extreme_POT = Extreme_detection(TairData$Tair_f, TairData$Date, 50, 'POT')
## Extreme at 95th percentile using POT method---
Tair_extreme_POT = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'POT')
Quantiles(Tair_extreme_POT$Value, 5, 95)
Quantiles(Tair_extreme_POT$Value, 5, 95)
View(Extremes_per_year_POT)
Extremes_per_year_POT = Extremes_per_year(Tair_extreme_POT)
Plot_Extremes(Tair_extreme_POT %>% filter(Date > '2017-01-01'))
Plot_Extremes(Tair_extreme_POT %>% filter(Date > '2017-01-01'))
Plot_Extremes = function(DF){
if ("Var_LTm" %in% colnames(DF)){
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', size=2, stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
geom_line(aes(y = Var_LTm, color = 'Long-term mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
}
else {
p = DF %>%
ggplot(., aes(x = Date, y = Value)) +
geom_point(aes(color = Extreme)) +
geom_line(size = 0.4) + theme_bw()
return(DF)
}
}
Plot_Extremes(Tair_extreme_POT %>% filter(Date > '2017-01-01'))
## Extreme at 95th percentile using POT method---
Tair_extreme_POT = Extreme_detection(TairData$Tair_f, TairData$Date, 60, 'POT')
Quantiles(Tair_extreme_POT$Value, 5, 95)
Quantiles(Tair_extreme_POT$Value, 40, 60)
Total_Extremes(Tair_extreme_BM)
Print_Quantile_Thresholds(Tair_extreme_BM, 5, 95)
Quantiles(Tair_extreme_BM$del_Var, 5, 95)
Plot_Extremes(Tair_extreme_MA %>% filter(Date > '2017-01-01' & Date < '2018-01-01'))
Plot_Extremes = function(DF){
if ("Var_LTm" %in% colnames(DF)){
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', size=2, stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
geom_line(aes(y = Var_LTm, color = 'Long-term mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
}
else {
p = DF %>%
ggplot(., aes(x = Date, y = Value)) +
geom_point(aes(color = Extreme)) +
geom_line(size = 0.4) + theme_bw()
return(DF)
}
}
Plot_Extremes(Tair_extreme_MA %>% filter(Date > '2017-01-01' & Date < '2018-01-01'))
Plot_Extremes = function(DF){
if ("Var_LTm" %in% colnames(DF)){
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', size=2, stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
geom_line(aes(y = Var_LTm, color = 'Long-term mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
}
else {
p = DF %>%
ggplot(., aes(x = Date, y = Value)) +
geom_point(aes(color = Extreme)) +
geom_line(size = 0.4) + theme_bw()
return(DF)
}
}
Plot_Extremes(Tair_extreme_MA %>% filter(Date > '2017-01-01' & Date < '2018-01-01'))
Plot_Extremes(Tair_extreme_MA %>% filter((Date > '2017-01-01') & (Date < '2018-01-01')))
library(dplyr)
library(boot)
library(ggplot2)
library(zoo)
meanFunc <- function (data, i){
d<-data [i]
return (mean (d))
}
Extreme_detection = function(X,timecol,prob, method, rollmean_period = 15)
{
if(method == 'POT')
{
sprintf('Extremes detection using peak over threshold method at: %f percentile',prob)
DF = data.frame(Value = X, Date = timecol)
DF = DF %>%
mutate(Extreme = if_else(Value > quantile(Value, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(Value < quantile(Value, probs = (1- prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## selecting values higher and lower than the percentile
p = DF %>%
ggplot(., aes(x = Date, y = Value)) +
geom_point(aes(color = Extreme)) +
geom_line(size = 0.4) + theme_bw()
print(p)
return(DF)
}
if(method == 'BM')
{
sprintf('Extremes detection using block maxima at %f percentile',prob)
DF = data.frame(Value = X, Date = timecol) %>% mutate(DOY = as.numeric(format(Date,'%j'))) # calculating DOY for long-term mean, calculate month if working on monthly data.
DF = DF %>% mutate(Var_15ma = lead(c(rep(NA, rollmean_period - 1),zoo::rollmean(Value,rollmean_period, align = 'center')),7)) %>%   ## 15-day moving average and then long-term mean
group_by(DOY) %>%
mutate(Var_LTm = mean(boot(Var_15ma,meanFunc,100)$t, na.rm = TRUE))  %>%   ## Var_LTm is the long-term mean based on a 15-day moving average-
mutate(del_Var = Value - Var_LTm) %>%       ## deviation from a long-term mean
mutate(Extreme = if_else(del_Var > quantile(del_Var, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(del_Var < quantile(del_Var, probs = (1-prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## Assigning extreme classes based on del_Var
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', size=2, stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
theme_bw() +
geom_line(aes(y = Var_LTm, color = 'Long-term mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
return(DF)
}
if(method == 'MA')
{
sprintf('Extremes detection using "moving average" at %f percentile',prob)
DF = data.frame(Value = X, Date = timecol) %>% mutate(DOY = as.numeric(format(Date,'%j'))) # calculating DOY for the long-term mean, calculate month if working on monthly data.
DF = DF %>%
arrange(Date) %>%
mutate(Var_15ma = lead(c(rep(NA, rollmean_period - 1),zoo::rollmean(Value,rollmean_period, align = 'center')),7)) %>%   ## 15-day moving average
mutate(del_Var = Value - Var_15ma) %>%       ## deviation from a 15-day moving average (change the days as per requirement)
mutate(Extreme = if_else(del_Var > quantile(del_Var, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(del_Var < quantile(del_Var, probs = (1-prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## Assigning extreme classes based on del_Var
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
theme_bw() +
geom_line(aes(y = Var_15ma, color = 'moving mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
return(DF)
}
if(!method %in% c('POT','BM','MA'))
{
print('Error: enter the method for extreme detection')
}
}
#1. Examples----------------------
load('Tair_TS_CH-Dav_1997_2018.RData')  # load the timeseries data provided with the script
summary(TairData)
## Extreme at 95th percentile using POT method---
Tair_extreme_POT = Extreme_detection(TairData$Tair_f, TairData$Date, 60, 'POT')
Extremes_per_year_POT = Extremes_per_year(Tair_extreme_POT)
Plot_Extremes(Tair_extreme_POT %>% filter(Date > '2017-01-01'))
Total_Extremes(Tair_extreme_POT)
Quantiles(Tair_extreme_POT$Value, 5, 95)
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 15)
Quantiles(Tair_extreme_BM$del_Var, 5, 95)
Extremes_per_year_BM = Extremes_per_year(Tair_extreme_BM)
Plot_Extremes(Tair_extreme_BM %>% filter(Date > '2017-01-01'))
Total_Extremes(Tair_extreme_BM)
## Extreme at 95th percentile using MA method---
Tair_extreme_MA = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'MA', rollmean_period = 15)
Extremes_per_year_MA = Extremes_per_year(Tair_extreme_BM)
Plot_Extremes(Tair_extreme_MA %>% filter((Date > '2017-01-01') & (Date < '2018-01-01')))
Total_Extremes(Tair_extreme_MA)
Plot_All_Extremes(Tair_extreme_POT, Tair_extreme_BM, Tair_extreme_MA)
Quantiles(Tair_extreme_MA$del_Var, 5, 95)
-------------------------------------------------------------------------------
#3. Additional functions ------------------------------------------------------
-------------------------------------------------------------------------------
Quantiles = function(x, q_low, q_high){
x_mean = mean(x)
x_sd = sd(x)
y = dnorm(x, T1997_mean, T1997_sd)
qh = quantile(x,q_high*0.01, na.rm=TRUE)
ql = quantile(x,q_low*0.01, na.rm=TRUE)
above_qh = TairData$Tair_f[TairData$Tair_f > qh]
below_ql = TairData$Tair_f[TairData$Tair_f < ql]
print(paste("Lower threshold of ",q_low,"%: ",sep = ""))
print(ql)
print(paste("Upper threshold of ",q_high,"%: ",sep = ""))
print(qh)
plot(x,y)
lines(c(ql,ql), c(0,1), col="red", lwd=4)
lines(c(qh,qh), c(0,1), col="blue", lwd=4)
legend("topleft", legend=c(paste("Q",q_low,sep = ""), paste("Q",q_high,sep = "")), col=c("red","blue"), lty=1, lwd=4)
}
Plot_Extremes(Tair_extreme_MA %>% filter((Date > '2017-01-01') & (Date < '2018-01-01')))
Plot_Extremes(Tair_extreme_MA %>% filter((Date > '2017-01-01') & (Date < '2018-01-01')))
Plot_Extremes = function(DF){
if ("Var_LTm" %in% colnames(DF)){
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', size=2, stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
geom_line(aes(y = Var_LTm, color = 'Long-term mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
}
else {
p = DF %>%
ggplot(., aes(x = Date, y = Value)) +
geom_point(aes(color = Extreme)) +
geom_line(size = 0.4) + theme_bw()
print(p)
return(DF)
}
}
Plot_Extremes(Tair_extreme_MA %>% filter((Date > '2017-01-01') & (Date < '2018-01-01')))
Plot_Extremes(Tair_extreme_MA %>% filter(Date > '2017-01-01' & Date < '2018-01-01'))
Plot_Extremes = function(DF){
if ("Var_LTm" %in% colnames(DF)){
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', size=2, stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
geom_line(aes(y = Var_LTm, color = 'Long-term mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
}
else {
p = DF %>%
ggplot(., aes(x = Date, y = Value)) +
geom_point(aes(color = Extreme)) +
geom_line(size = 0.4) + theme_bw()
print(p)
}
}
Plot_Extremes(Tair_extreme_MA %>% filter(Date > '2017-01-01' & Date < '2018-01-01'))
