DF = DF %>% mutate(Var_15ma = lead(c(rep(NA, 15 - 1),zoo::rollmean(Value,15, align = 'center')),7)) %>%   ## 15-day moving average and then long-term mean
group_by(DOY) %>%
mutate(Var_LTm = mean(boot(Var_15ma,meanFunc,100)$t, na.rm = TRUE))  %>%   ## Var_LTm is the long-term mean based on a 15-day moving average-
mutate(del_Var = Value - Var_LTm) %>%       ## deviation from a long-term mean
mutate(Extreme = if_else(del_Var > quantile(del_Var, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(del_Var < quantile(del_Var, probs = (1-prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## Assigning extreme classes based on del_Var
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, color = Extreme), color = 'black', stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
theme_bw() +
geom_line(aes(y = Var_LTm, color = 'Long-term mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
return(DF)
}
if(method == 'MA')
{
sprintf('Extremes detection using "moving average" at %f percentile',prob)
DF = data.frame(Value = X, Date = timecol) %>% mutate(DOY = as.numeric(format(Date,'%j'))) # calculating DOY for the long-term mean, calculate month if working on monthly data.
DF = DF %>%
arrange(Date) %>%
mutate(Var_15ma = lead(c(rep(NA, 15 - 1),zoo::rollmean(Value,15, align = 'center')),7)) %>%   ## 15-day moving average
mutate(del_Var = Value - Var_15ma) %>%       ## deviation from a 15-day moving average (change the days as per requirement)
mutate(Extreme = if_else(del_Var > quantile(del_Var, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(del_Var < quantile(del_Var, probs = (1-prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## Assigning extreme classes based on del_Var
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
theme_bw() +
geom_line(aes(y = Var_15ma, color = 'moving mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
return(DF)
}
if(!method %in% c('POT','BM','MA'))
{
print('Error: enter the method for extreme detection')
}
}
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM')
Extreme_detection = function(X,timecol,prob, method)
{
if(method == 'POT')
{
sprintf('Extremes detection using peak over threshold method at: %f percentile',prob)
DF = data.frame(Value = X, Date = timecol)
DF = DF %>%
mutate(Extreme = if_else(Value > quantile(Value, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(Value < quantile(Value, probs = (1- prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## selecting values higher and lower than the percentile
p = DF %>%
ggplot(., aes(x = Date, y = Value)) +
geom_point(aes(color = Extreme)) +
geom_line(size = 0.4) + theme_bw()
print(p)
return(DF)
}
if(method == 'BM')
{
sprintf('Extremes detection using block maxima at %f percentile',prob)
DF = data.frame(Value = X, Date = timecol) %>% mutate(DOY = as.numeric(format(Date,'%j'))) # calculating DOY for long-term mean, calculate month if working on monthly data.
DF = DF %>% mutate(Var_15ma = lead(c(rep(NA, 15 - 1),zoo::rollmean(Value,15, align = 'center')),7)) %>%   ## 15-day moving average and then long-term mean
group_by(DOY) %>%
mutate(Var_LTm = mean(boot(Var_15ma,meanFunc,100)$t, na.rm = TRUE))  %>%   ## Var_LTm is the long-term mean based on a 15-day moving average-
mutate(del_Var = Value - Var_LTm) %>%       ## deviation from a long-term mean
mutate(Extreme = if_else(del_Var > quantile(del_Var, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(del_Var < quantile(del_Var, probs = (1-prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## Assigning extreme classes based on del_Var
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
theme_bw() +
geom_line(aes(y = Var_LTm, color = 'Long-term mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
return(DF)
}
if(method == 'MA')
{
sprintf('Extremes detection using "moving average" at %f percentile',prob)
DF = data.frame(Value = X, Date = timecol) %>% mutate(DOY = as.numeric(format(Date,'%j'))) # calculating DOY for the long-term mean, calculate month if working on monthly data.
DF = DF %>%
arrange(Date) %>%
mutate(Var_15ma = lead(c(rep(NA, 15 - 1),zoo::rollmean(Value,15, align = 'center')),7)) %>%   ## 15-day moving average
mutate(del_Var = Value - Var_15ma) %>%       ## deviation from a 15-day moving average (change the days as per requirement)
mutate(Extreme = if_else(del_Var > quantile(del_Var, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(del_Var < quantile(del_Var, probs = (1-prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## Assigning extreme classes based on del_Var
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
theme_bw() +
geom_line(aes(y = Var_15ma, color = 'moving mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
return(DF)
}
if(!method %in% c('POT','BM','MA'))
{
print('Error: enter the method for extreme detection')
}
}
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM')
Extreme_detection = function(X,timecol,prob, method)
{
if(method == 'POT')
{
sprintf('Extremes detection using peak over threshold method at: %f percentile',prob)
DF = data.frame(Value = X, Date = timecol)
DF = DF %>%
mutate(Extreme = if_else(Value > quantile(Value, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(Value < quantile(Value, probs = (1- prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## selecting values higher and lower than the percentile
p = DF %>%
ggplot(., aes(x = Date, y = Value)) +
geom_point(aes(color = Extreme)) +
geom_line(size = 0.4) + theme_bw()
print(p)
return(DF)
}
if(method == 'BM')
{
sprintf('Extremes detection using block maxima at %f percentile',prob)
DF = data.frame(Value = X, Date = timecol) %>% mutate(DOY = as.numeric(format(Date,'%j'))) # calculating DOY for long-term mean, calculate month if working on monthly data.
DF = DF %>% mutate(Var_15ma = lead(c(rep(NA, 15 - 1),zoo::rollmean(Value,15, align = 'center')),7)) %>%   ## 15-day moving average and then long-term mean
group_by(DOY) %>%
mutate(Var_LTm = mean(boot(Var_15ma,meanFunc,100)$t, na.rm = TRUE))  %>%   ## Var_LTm is the long-term mean based on a 15-day moving average-
mutate(del_Var = Value - Var_LTm) %>%       ## deviation from a long-term mean
mutate(Extreme = if_else(del_Var > quantile(del_Var, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(del_Var < quantile(del_Var, probs = (1-prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## Assigning extreme classes based on del_Var
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
theme_bw() +
geom_line(aes(y = Var_LTm, color = 'Long-term mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
return(DF)
}
if(method == 'MA')
{
sprintf('Extremes detection using "moving average" at %f percentile',prob)
DF = data.frame(Value = X, Date = timecol) %>% mutate(DOY = as.numeric(format(Date,'%j'))) # calculating DOY for the long-term mean, calculate month if working on monthly data.
DF = DF %>%
arrange(Date) %>%
mutate(Var_15ma = lead(c(rep(NA, 15 - 1),zoo::rollmean(Value,15, align = 'center')),7)) %>%   ## 15-day moving average
mutate(del_Var = Value - Var_15ma) %>%       ## deviation from a 15-day moving average (change the days as per requirement)
mutate(Extreme = if_else(del_Var > quantile(del_Var, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(del_Var < quantile(del_Var, probs = (1-prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## Assigning extreme classes based on del_Var
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', stroke = 0, size=2, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
theme_bw() +
geom_line(aes(y = Var_15ma, color = 'moving mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
return(DF)
}
if(!method %in% c('POT','BM','MA'))
{
print('Error: enter the method for extreme detection')
}
}
## Extreme at 95th percentile using POT method---
Tair_extreme_POT = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'POT')
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM')
Extreme_detection = function(X,timecol,prob, method)
{
if(method == 'POT')
{
sprintf('Extremes detection using peak over threshold method at: %f percentile',prob)
DF = data.frame(Value = X, Date = timecol)
DF = DF %>%
mutate(Extreme = if_else(Value > quantile(Value, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(Value < quantile(Value, probs = (1- prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## selecting values higher and lower than the percentile
p = DF %>%
ggplot(., aes(x = Date, y = Value)) +
geom_point(aes(color = Extreme)) +
geom_line(size = 0.4) + theme_bw()
print(p)
return(DF)
}
if(method == 'BM')
{
sprintf('Extremes detection using block maxima at %f percentile',prob)
DF = data.frame(Value = X, Date = timecol) %>% mutate(DOY = as.numeric(format(Date,'%j'))) # calculating DOY for long-term mean, calculate month if working on monthly data.
DF = DF %>% mutate(Var_15ma = lead(c(rep(NA, 15 - 1),zoo::rollmean(Value,15, align = 'center')),7)) %>%   ## 15-day moving average and then long-term mean
group_by(DOY) %>%
mutate(Var_LTm = mean(boot(Var_15ma,meanFunc,100)$t, na.rm = TRUE))  %>%   ## Var_LTm is the long-term mean based on a 15-day moving average-
mutate(del_Var = Value - Var_LTm) %>%       ## deviation from a long-term mean
mutate(Extreme = if_else(del_Var > quantile(del_Var, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(del_Var < quantile(del_Var, probs = (1-prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## Assigning extreme classes based on del_Var
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', size=2, stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
theme_bw() +
geom_line(aes(y = Var_LTm, color = 'Long-term mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
return(DF)
}
if(method == 'MA')
{
sprintf('Extremes detection using "moving average" at %f percentile',prob)
DF = data.frame(Value = X, Date = timecol) %>% mutate(DOY = as.numeric(format(Date,'%j'))) # calculating DOY for the long-term mean, calculate month if working on monthly data.
DF = DF %>%
arrange(Date) %>%
mutate(Var_15ma = lead(c(rep(NA, 15 - 1),zoo::rollmean(Value,15, align = 'center')),7)) %>%   ## 15-day moving average
mutate(del_Var = Value - Var_15ma) %>%       ## deviation from a 15-day moving average (change the days as per requirement)
mutate(Extreme = if_else(del_Var > quantile(del_Var, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(del_Var < quantile(del_Var, probs = (1-prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## Assigning extreme classes based on del_Var
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
theme_bw() +
geom_line(aes(y = Var_15ma, color = 'moving mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
return(DF)
}
if(!method %in% c('POT','BM','MA'))
{
print('Error: enter the method for extreme detection')
}
}
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM')
plot_extremes = function(DF){
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', size=2, stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
theme_bw() +
geom_line(aes(y = Var_LTm, color = 'Long-term mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
}
plot_extremes(Tair_extreme[Tair_extreme_BM$Date > '2017-01-01'])
plot_extremes(Tair_extreme_BM[Tair_extreme_BM$Date > '2017-01-01'])
Tair_extreme_BM[Tair_extreme_BM$Date > '2017-01-01']
Tair_extreme_BM[Tair_extreme_BM$Date < '2017-01-01']
Tair_extreme_BM[Tair_extreme_BM$Date < '01-01-2017']
plot_extremes(Tair_extreme_BM %>% filter(Date > '2017-01-01'))
plot_extremes(Tair_extreme_POT %>% filter(Date > '2017-01-01'))
plot_extremes = function(DF){
if ("Var_LTm" %in% colnames(DF)){
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', size=2, stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
theme_bw() +
geom_line(aes(y = Var_LTm, color = 'Long-term mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
}
else {
p = DF %>%
ggplot(., aes(x = Date, y = Value)) +
geom_point(aes(color = Extreme)) +
geom_line(size = 0.4) + theme_bw()
print(p)
return(DF)
}
}
plot_extremes(Tair_extreme_POT %>% filter(Date > '2017-01-01'))
plot_extremes(Tair_extreme_MA %>% filter(Date > '2017-01-01'))
Extreme_detection = function(X,timecol,prob, method, rollmean_period = 15)
{
if(method == 'POT')
{
sprintf('Extremes detection using peak over threshold method at: %f percentile',prob)
DF = data.frame(Value = X, Date = timecol)
DF = DF %>%
mutate(Extreme = if_else(Value > quantile(Value, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(Value < quantile(Value, probs = (1- prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## selecting values higher and lower than the percentile
p = DF %>%
ggplot(., aes(x = Date, y = Value)) +
geom_point(aes(color = Extreme)) +
geom_line(size = 0.4) + theme_bw()
print(p)
return(DF)
}
if(method == 'BM')
{
sprintf('Extremes detection using block maxima at %f percentile',prob)
DF = data.frame(Value = X, Date = timecol) %>% mutate(DOY = as.numeric(format(Date,'%j'))) # calculating DOY for long-term mean, calculate month if working on monthly data.
DF = DF %>% mutate(Var_15ma = lead(c(rep(NA, rollmean_period - 1),zoo::rollmean(Value,rollmean_period, align = 'center')),7)) %>%   ## 15-day moving average and then long-term mean
group_by(DOY) %>%
mutate(Var_LTm = mean(boot(Var_15ma,meanFunc,100)$t, na.rm = TRUE))  %>%   ## Var_LTm is the long-term mean based on a 15-day moving average-
mutate(del_Var = Value - Var_LTm) %>%       ## deviation from a long-term mean
mutate(Extreme = if_else(del_Var > quantile(del_Var, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(del_Var < quantile(del_Var, probs = (1-prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## Assigning extreme classes based on del_Var
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', size=2, stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
theme_bw() +
geom_line(aes(y = Var_LTm, color = 'Long-term mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
return(DF)
}
if(method == 'MA')
{
sprintf('Extremes detection using "moving average" at %f percentile',prob)
DF = data.frame(Value = X, Date = timecol) %>% mutate(DOY = as.numeric(format(Date,'%j'))) # calculating DOY for the long-term mean, calculate month if working on monthly data.
DF = DF %>%
arrange(Date) %>%
mutate(Var_15ma = lead(c(rep(NA, rollmean_period - 1),zoo::rollmean(Value,rollmean_period, align = 'center')),7)) %>%   ## 15-day moving average
mutate(del_Var = Value - Var_15ma) %>%       ## deviation from a 15-day moving average (change the days as per requirement)
mutate(Extreme = if_else(del_Var > quantile(del_Var, probs = prob*0.01, na.rm = TRUE), 'Extreme-high',
if_else(del_Var < quantile(del_Var, probs = (1-prob*0.01), na.rm = TRUE), 'Extreme-low', 'Not-Extreme')))  ## Assigning extreme classes based on del_Var
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
theme_bw() +
geom_line(aes(y = Var_15ma, color = 'moving mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
return(DF)
}
if(!method %in% c('POT','BM','MA'))
{
print('Error: enter the method for extreme detection')
}
}
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM')
plot_extremes(Tair_extreme_BM %>% filter(Date > '2017-01-01'))
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 365)
plot_extremes(Tair_extreme_BM %>% filter(Date > '2017-01-01'))
Extremes_per_year_BM = Extremes_per_year(Tair_extreme_BM)
## Extreme at 95th percentile using POT method---
Tair_extreme_POT = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'POT')
Extremes_per_year_POT = Extremes_per_year(Tair_extreme_POT)
plot_extremes(Tair_extreme_POT %>% filter(Date > '2017-01-01'))
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 30)
Extremes_per_year_BM = Extremes_per_year(Tair_extreme_BM)
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 120)
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 250)
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 300)
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 350)
plot_extremes(Tair_extreme_BM %>% filter(Date > '2017-01-01'))
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 350)
Extremes_per_year_BM = Extremes_per_year(Tair_extreme_BM)
plot_extremes(Tair_extreme_BM %>% filter(Date > '2017-01-01'))
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 365)
Extremes_per_year_BM = Extremes_per_year(Tair_extreme_BM)
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 10)
plot_extremes(Tair_extreme_BM %>% filter(Date > '2017-01-01'))
Extremes_per_year_BM = Extremes_per_year(Tair_extreme_BM)
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 10)
Quantiles(Tair_extreme_BM$Var_15ma, 95, 5)
Quantiles(Tair_extreme_BM$Var_15ma, 5, 95)
#3. Quantiles function--------------
Quantiles = function(x, q_low, q_high){
x_mean = mean(x)
x_sd = sd(x)
y = dnorm(x, T1997_mean, T1997_sd)
qh = quantile(x,q_high*0.01, na.rm=TRUE)
ql = quantile(x,q_low*0.01, na.rm=TRUE)
above_qh = TairData$Tair_f[TairData$Tair_f > qh]
below_ql = TairData$Tair_f[TairData$Tair_f < ql]
print(paste("Percentage of values below q",q_low,": ",sep = ""))
print(length(above_q90) / length(TairData$Tair_f) * 100)
print(paste("Percentage of values above q",q_high,": ",sep = ""))
print(length(below_q10) / length(TairData$Tair_f) * 100)
plot(x,y)
lines(c(ql,ql), c(0,1), col="red", lwd=4)
lines(c(qh,qh), c(0,1), col="blue", lwd=4)
legend("topleft", legend=c(paste("Q",q_low,sep = ""), paste("Q",q_high,sep = "")), col=c("red","blue"), lty=1, lwd=4)
}
Quantiles(Tair_extreme_BM$Var_15ma, 5, 95)
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 30)
Quantiles(Tair_extreme_BM$Var_15ma, 5, 95)
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 360)
Quantiles(Tair_extreme_BM$Var_15ma, 5, 95)
Quantiles(Tair_extreme_BM$Var_LTm, 5, 95)
plot_extremes(Tair_extreme_BM %>% filter(Date > '2017-01-01'))
## Extreme at 95th percentile using MA method---
Tair_extreme_MA = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'MA')
plot_extremes(Tair_extreme_MA %>% filter(Date > '2017-01-01'))
plot_extremes(Tair_extreme_BM %>% filter(Date > '2017-01-01'))
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 1)
Quantiles(Tair_extreme_BM$Var_LTm, 5, 95)
Extremes_per_year_BM = Extremes_per_year(Tair_extreme_BM)
plot_extremes(Tair_extreme_BM %>% filter(Date > '2017-01-01'))
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 15)
plot_extremes(Tair_extreme_BM %>% filter(Date > '2017-01-01'))
## Extreme at 95th percentile using MA method---
Tair_extreme_MA = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'MA')
Extremes_per_year_MA = Extremes_per_year(Tair_extreme_BM)
Total_Extremes(DF){
Total_Extremes(Tair_extreme_MA)
Total_Extremes(DF){
Total_Extremes = function(DF){
total_extremes = table(DF$Extreme)
print(total_extremes)
}
Total_Extremes(Tair_extreme_MA)
Total_Extremes(Tair_extreme_BM)
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 365)
Total_Extremes(Tair_extreme_BM)
## Extreme at 95th percentile using BM method---
Tair_extreme_BM = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'BM', rollmean_period = 15)
Total_Extremes(Tair_extreme_POT)
## Extreme at 95th percentile using MA method---
Tair_extreme_MA = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'MA')
Extremes_per_year_MA = Extremes_per_year(Tair_extreme_BM)
Plot_Extremes(Tair_extreme_MA %>% filter(Date > '2017-01-01'))
Plot_Extremes = function(DF){
if ("Var_LTm" %in% colnames(DF)){
p = DF %>%
ggplot(., aes(x = Date)) +
geom_point(aes(y = Value, fill = Extreme), color = 'black', size=2, stroke = 0, shape = 21) +
geom_line(aes(y = Value, color = 'Value'), size = 0.4) +
theme_bw() +
geom_line(aes(y = Var_LTm, color = 'Long-term mean'), size = 0.8) +
scale_color_manual('', values = c('black','grey50'))
print(p)
}
else {
p = DF %>%
ggplot(., aes(x = Date, y = Value)) +
geom_point(aes(color = Extreme)) +
geom_line(size = 0.4) + theme_bw()
print(p)
return(DF)
}
}
Plot_Extremes(Tair_extreme_MA %>% filter(Date > '2017-01-01'))
Total_Extremes(Tair_extreme_MA)
## Extreme at 95th percentile using MA method---
Tair_extreme_MA = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'MA', rollmean_period = 365)
Extremes_per_year_MA = Extremes_per_year(Tair_extreme_BM)
Plot_Extremes(Tair_extreme_MA %>% filter(Date > '2017-01-01'))
Total_Extremes(Tair_extreme_MA)
## Extreme at 95th percentile using MA method---
Tair_extreme_MA = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'MA', rollmean_period = 15)
Extremes_per_year_MA = Extremes_per_year(Tair_extreme_BM)
Plot_Extremes(Tair_extreme_MA %>% filter(Date > '2017-01-01'))
Total_Extremes(Tair_extreme_MA)
Print_Quantile_Thresholds = function(DF, lower_limit, upper_limit){
print("Lower extreme limit: ")
print(quantile(DF$del_var,lower_limit * 0.01 ))
print("Upper extreme limit: ")
print(quantile(DF$del_var,1- upper_limit * 0.01 ))
}
Print_Quantile_Thresholds(Tair_extreme_MA)
Print_Quantile_Thresholds(Tair_extreme_MA, 5, 95)
Print_Quantile_Thresholds = function(DF, lower_limit, upper_limit){
print("Lower extreme limit: ")
print(quantile(DF$del_var, probs=lower_limit * 0.01 ))
print("Upper extreme limit: ")
print(quantile(DF$del_var, probs= 1- upper_limit * 0.01 ))
}
Print_Quantile_Thresholds(Tair_extreme_MA, 5, 95)
Print_Dates_Of_Extremes = function(DF){
print(DF %>% filter((Date$Extreme == "Extreme-high") | (Date$Extreme == "Extreme-low") ))
}
Print_Dates_Of_Extremes(Tair_extreme_MA)
## Extreme at 95th percentile using MA method---
Tair_extreme_MA = Extreme_detection(TairData$Tair_f, TairData$Date, 95, 'MA', rollmean_period = 15)
Print_Dates_Of_Extremes(Tair_extreme_MA)
Print_Dates_Of_Extremes = function(DF){
print(DF %>% filter(Date$Extreme == "Extreme-high"))
}
Print_Dates_Of_Extremes(Tair_extreme_MA)
Print_Dates_Of_Extremes = function(DF){
print(DF %>% filter(Extreme == "Extreme-high" | Extreme == "Extreme-low"))
}
Print_Dates_Of_Extremes(Tair_extreme_MA)
Print_Dates_Of_Extremes = function(DF){
extremes = DF %>% filter(Extreme == "Extreme-high" | Extreme == "Extreme-low")
plot(extremes$Date,extremes$Value)
}
Print_Dates_Of_Extremes(Tair_extreme_MA)
Print_Dates_Of_Extremes = function(DF){
extremes = DF %>% filter(Extreme == "Extreme-high" | Extreme == "Extreme-low")
d = density(extremes$value)
plot(d)
}
Print_Dates_Of_Extremes(Tair_extreme_MA)
Print_Dates_Of_Extremes = function(DF){
extremes = DF %>% filter(Extreme == "Extreme-high" | Extreme == "Extreme-low")
d = density(extremes$Value)
plot(d)
}
Print_Dates_Of_Extremes(Tair_extreme_MA)
